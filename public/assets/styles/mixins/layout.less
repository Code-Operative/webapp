.mediaQuery(@minWidth; @rules) {
  @media only screen and (min-width: @minWidth) {
    @rules();
  }
}

// (Legacy) Alias of mediaQuery
.responsive(@minWidth; @rules) {
  @media only screen and (min-width: @minWidth) {
    @rules();
  }
}

// set a CSS property to the value given by the appropriate responsive
// Less mixin without having to supply the screen size suffix
.set-responsively(@prop, @value-name) {
  // intermediate values required for correct Less compilation
  @xs: "@{value-name}-xs";
  @sm: "@{value-name}-sm";
  @md: "@{value-name}-md";
  @lg: "@{value-name}-lg";
  @xl: "@{value-name}-xl";

  // set the property responsively
  @{prop}: @@xs;
  .responsive(@screen-sm, { @{prop}: @@sm; });
  .responsive(@screen-md, { @{prop}: @@md; });
  .responsive(@screen-lg, { @{prop}: @@lg; });
  .responsive(@screen-xl, { @{prop}: @@xl; });
}

// Responsive screen sizes, default is < 576px
@screen-sm: 576px;
@screen-md: 768px;
@screen-lg: 992px;
@screen-xl: 1200px;

// Fonts
@font-size-xs: 12px;
@font-size-sm: 14px;
@font-size-md: 18px;
@font-size-lg: 22px;
@font-size-xl: 26px;
@font-weight-extra-light: 200;
@font-weight-light: 300;
@font-weight-normal: 400;
@font-weight-heavy: 500;
@font-weight-extra-heavy: 600;

// Component specific mixins

// Sidebar
// Width must be divisible by the number of
// control buttons for pixel-perfect placement.
// Then we add the width of the borders = 1px.
@sidebar-w: 201px;
@sidebar-w-lg: 249px;
@frame-column-width-xs: @sidebar-w;
@frame-column-width-sm: @sidebar-w;
@frame-column-width-md: @sidebar-w;
@frame-column-width-lg: @sidebar-w-lg;
@frame-column-width-xl: @sidebar-w-lg;

// Navbar.
@navbar-h: 45px;

@page-margin-xs: 0%;
@page-margin-sm: 0%;
@page-margin-md: 10%;
@page-margin-lg: 14%;
@page-margin-xl: 17%;

// Stacking order.
@z-sidebar: 11;
@z-navbar: 12;
